import React, { useEffect, useMemo, useRef, useState } from "react";
import { TextInput, TextInputProps, StyleSheet, Pressable, Animated, ViewStyle, TextStyle } from "react-native";

type Props = Omit<TextInputProps, "onChange"> & {
  label: string;
  value: string;
  onChangeText: (text: string) => void;

  containerStyle?: ViewStyle;
  inputStyle?: TextStyle;
  labelStyle?: TextStyle;

  borderColor?: string;
  focusedBorderColor?: string;

  /**
   * –ü–∞—Ç—á–∏–∫ –ø–æ–¥ –ª–µ–π–±–ª–æ–º, —á—Ç–æ–±—ã –±–æ—Ä–¥–µ—Ä –Ω–µ ‚Äú—Ä–µ–∑–∞–ª‚Äù —Ç–µ–∫—Å—Ç.
   * –ü–æ—Å—Ç–∞–≤—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —ç–∫—Ä–∞–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é #fff). –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã
   * –±–æ—Ä–¥–µ—Ä –ø—Ä–æ—Ö–æ–¥–∏–ª –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç ‚Äî –∑–∞–¥–∞–π 'transparent'.
   */
  labelBackgroundColor?: string;

  left?: React.ReactNode;
  right?: React.ReactNode;
};

const FloatingLabelInput: React.FC<Props> = ({
  label,
  value,
  onChangeText,
  containerStyle,
  inputStyle,
  labelStyle,
  borderColor = "#D0D5DD",
  focusedBorderColor = "#00B1E3",
  labelBackgroundColor = "",
  left,
  right,
  onFocus,
  onBlur,
  ...rest
}) => {
  const inputRef = useRef<TextInput>(null);
  const [focused, setFocused] = useState(false);

  // 0 -> –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ –∏ –ø—É—Å—Ç–æ; 1 -> –≤ —Ñ–æ–∫—É—Å–µ –ò–õ–ò –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
  const anim = useRef(new Animated.Value(value ? 1 : 0)).current;

  useEffect(() => {
    Animated.timing(anim, {
      toValue: focused || !!value ? 1 : 0,
      duration: 160,
      useNativeDriver: true,
    }).start();
  }, [focused, value, anim]);

  const borderClr = focused ? focusedBorderColor : borderColor;

  // –õ–µ–π–±–ª ‚Äú—Å–∏–¥–∏—Ç‚Äù –Ω–∞ –±–æ—Ä–¥–µ—Ä–µ —Å–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞
  const labelTranslateY = anim.interpolate({
    inputRange: [0, 1],
    outputRange: [0, -8], // –ø–æ–¥–Ω–∏–º–∏ –≤—ã—à–µ, —á—Ç–æ–±—ã –æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ –ª–∏–Ω–∏–∏ –±–æ—Ä–¥–µ—Ä–∞
  });

  const labelOpacity = anim.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
  });

  return (
    <Pressable
      onPress={() => inputRef.current?.focus()}
      style={[styles.wrap, { borderColor: borderClr }, containerStyle]}
    >
      {/* –°–∞–º –∏–Ω–ø—É—Ç */}
      <TextInput
        ref={inputRef}
        value={value}
        onChangeText={onChangeText}
        placeholderTextColor="#000"
        onFocus={e => {
          setFocused(true);
          onFocus?.(e);
        }}
        style={{ color: "#fff" }}
        onBlur={e => {
          setFocused(false);
          onBlur?.(e);
        }}
      />

      <Animated.View
        pointerEvents="none"
        style={[
          styles.labelPatch,
          {
            backgroundColor: labelBackgroundColor,
            transform: [{ translateY: labelTranslateY }],
            opacity: labelOpacity,
            left: left ? 36 : 16,
            zIndex: -1, // üëà —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª TextInput
          },
        ]}
      />

      <Animated.Text
        pointerEvents="none"
        style={[
          styles.label,
          {
            transform: [{ translateY: labelTranslateY }],
            opacity: labelOpacity,
            left: 16,
            color: "#00B1E3",
            backgroundColor: "#191A27",
            zIndex: -1, // üëà —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª –∫–ª–∏–∫–∏ –∏ –≤–≤–æ–¥
          },
          labelStyle,
        ]}
        numberOfLines={1}
      >
        {label}
      </Animated.Text>
    </Pressable>
  );
};

const styles = StyleSheet.create({
  wrap: {
    height: 50,
    borderRadius: 25,
    borderWidth: 1,
    paddingHorizontal: 16,
    backgroundColor: "transparent",
    justifyContent: "center",
  },
  input: {
    height: 50,
    paddingVertical: 0, // —É–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    backgroundColor: "transparent",
    color: "#fff",
    fontSize: 16,
  },
  label: {
    position: "absolute",
    top: 0, // –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º—Å—è –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (–∞–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–≤–µ—Ä—Ö)
    paddingHorizontal: 6,
  },
  labelPatch: {
    position: "absolute",
    top: 0,
    height: 12,
    borderRadius: 4,
    paddingHorizontal: 6,
    // —à–∏—Ä–∏–Ω–∞ –ø–∞—Ç—á–∞ –ø–æ–¥–≥–æ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ —á–µ—Ä–µ–∑ –ª–µ–π–±–ª, –ø–æ—ç—Ç–æ–º—É –¥–∞–¥–∏–º –º–∏–Ω–∏–º—É–º
    minWidth: 10,
  },
  adornLeft: {
    position: "absolute",
    left: 12,
    height: 50,
    justifyContent: "center",
  },
  adornRight: {
    position: "absolute",
    right: 12,
    height: 50,
    justifyContent: "center",
  },
});

export default FloatingLabelInput;
// style={[
//           styles.input,
//           {
//             paddingLeft: 16,
//             paddingRight: 16,
//             backgroundColor: "transparent", // —Ñ–∏–∫—Å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –±–µ–ª–æ–≥–æ
//             color: "#fff", // —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
//             fontSize: 16,
//           },
//           inputStyle,
//         ]}
